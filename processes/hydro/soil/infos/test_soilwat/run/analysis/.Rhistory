#   timeshift <- ifelse(s == "daily", 86400, 3600)
#   start_date <- as.character(rep(format(as.POSIXct(head(res_dat$end_of_interval[grep("^wc$", res_dat$item_name)], n=1), tz='UTC')-timeshift, format="%Y-%m-%d %H:%M:%S"), nrow(wc_par_dat)))
#   echse_states_dat <- data.frame(date = c(start_date, as.character(res_dat$end_of_interval[grep("^wc$", res_dat$item_name)])),
#                                  wc = c(inits_dat$value[grep("^wc$", inits_dat$variable)], res_dat$value[grep("^wc$", res_dat$item_name)]),
#                                  mat_pot = c(inits_dat$value[grep("^mat_pot$", inits_dat$variable)], res_dat$value[grep("^mat_pot$", res_dat$item_name)]),
#                                  k_u = c(inits_dat$value[grep("^k_u$", inits_dat$variable)], res_dat$value[grep("^k_u$", res_dat$item_name)])*1000*3600)
#   echse_states_xts <- xts(echse_states_dat[,-1], as.POSIXct(echse_states_dat$date, tz='UTC', format="%Y-%m-%d %H:%M:%S"))
#
#   # re-structure fluxes
#   fac <- 1000*3600 # factor to convert units from ms-1 -> mmh-1
#   vol_wat_init <- xts(sum(inits_dat$value[grep("^wc$", inits_dat$variable)] * wc_par_dat$hor_depth)*1000, as.POSIXct(head(index(echse_states_xts),n=1), tz='UTC'))
#   echse_flux <- data.frame(run_surf = c(0,res_dat$value[grep("^run_surf$", res_dat$item_name)]*fac),
#                            inflow = c(0,res_dat$value[grep("^inflow$", res_dat$item_name)]*fac),
#                            vol_wat = c(vol_wat_init, tapply(res_dat$value[grep("^wc$", res_dat$item_name)], res_dat$end_of_interval[grep("^wc$", res_dat$item_name)], function(x) sum(x*wc_par_dat$hor_depth))*1000),
#                            perc_out = c(0,res_dat$value[grep("^run_gw$", res_dat$item_name)]*fac))
#   echse_flux$inf_sum <- cumsum(echse_flux$inflow - echse_flux$run_surf)
#   echse_flux_xts <- xts(echse_flux, unique(index(echse_states_xts)))
#
#
#   # loop over selected dates to plot states and hydraulic properties
#   for (d in 1:length(dates)) {
#     date <- dates[d]
#
#     # if this is the first loop iteration initialise plots
#     if (i == 1) {
#       # moisture states
#       # initialise
#       png(paste("wc", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xlim=c(0,1), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="Water content (m3/m3)")
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # parameters (wc_res and wc_sat)
#       segments(x0=wc_par_dat$wc_res, y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="red", lwd=2, lty=2)
#       segments(x0=wc_par_dat$wc_s, y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="red", lwd=2, lty=2)
#       # legend
#       legend(1.08,0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("wc", date, sep="_")]] <- dev.cur()
#
#       # matric potential
#       # initialise
#       png(paste("mat_pot", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xlim=c(0,5), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="Matric potential (m)/(100 hPa)")
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # legend
#       legend(5.3,0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("mat_pot", date, sep="_")]] <- dev.cur()
#
#       # conductivity
#       # initialise
#       png(paste("cond", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xaxt="n", xlim=log10(c(1e-6,100)), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="")
#       ats = log10(c(1e-6, 1e-4, 1e-2, 1, 100))
#       labs = 10^ats
#       axis(1, at=ats, labels=labs, las=1)
#       title(xlab="Hydraulic conductivity (mm/h)", line=3.5)
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # plot ksat
#       segments(x0=log10(wc_par_dat$k_s*1000*3600), y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="black", lty=2)
#       # legend
#       legend(log10(250),0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("cond", date, sep="_")]] <- dev.cur()
#     }
#
#
#     # plot
#     # moisture states
#     dev.set(plots[[paste("wc", date, sep="_")]])
#     segments(x0=echse_states_xts[date,"wc"], y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#
#     # matric potential
#     dev.set(plots[[paste("mat_pot", date, sep="_")]])
#     segments(x0=echse_states_xts[date,"mat_pot"], y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#
#     # conductivity
#     dev.set(plots[[paste("cond", date, sep="_")]])
#     segments(x0=log10(echse_states_xts[date,"k_u"]), y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#   }
#
#
#   if (i == 1) {
#     # initialise flux plots
#     png("ts_surf.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"run_surf"], ylim=c(0,100), type="n", main="", xlab="Time", ylab="Surface runoff [mm/h]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,60,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_surf"]] <- dev.cur()
#
#     png("ts_inf.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"inf_sum"], ylim=c(25,110), type="n", main="", xlab="Time", ylab="Cumulated infiltration [mm]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,80,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_inf"]] <- dev.cur()
#
#     png("ts_volwat.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"vol_wat"], ylim=c(185,290), type="n", main="", xlab="Time", ylab="Water in soil profile [mm]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,260,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_volwat"]] <- dev.cur()
#
#     png("ts_percout.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"perc_out"], ylim=c(0,0.5), type="n", main="", xlab="Time", ylab="Percolation [mm/h]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,0.2,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_percout"]] <- dev.cur()
#   }
#
#
#   # plot fluxes
#   dev.set(plots[["ts_surf"]])
#   lines(echse_flux_xts[,"run_surf"], col=cols[i])
#
#   dev.set(plots[["ts_volwat"]])
#   lines(echse_flux_xts[,"vol_wat"], col=cols[i])
#
#   dev.set(plots[["ts_inf"]])
#   lines(echse_flux_xts[,"inf_sum"], col=cols[i])
#
#   dev.set(plots[["ts_percout"]])
#   lines(echse_flux_xts[,"perc_out"], col=cols[i])
# }
#
# graphics.off()
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggforce)
library(units)
setwd("/home/tobias/Anwendungen/echse/echse_engines/processes/hydro/soil/infos/test_soilwat/run/analysis/")
# results of solvers (names of directories containing respective dbg file)
# solvers <- c("euler_exp_own", "rk2mid_exp_own", "rk23_exp_gsl", "rk23_exp_gsl_adapt",
#              "rk4classic_exp_own", "rk4classic_exp_gsl", "rk4classic_exp_gsl_adapt",
#              "rkck_exp_gsl", "rkck_exp_gsl_adapt", "rkf45_exp_gsl", "rkf45_exp_gsl_adapt",
#              "rk8pd_exp_gsl", "rk8pd_exp_gsl_adapt",
#              "bs_imp_gsl", "adams_multistep_gsl", "bdf_multistep_gsl")
#experiments <- c("hourly", "hourly_dailyin")
# general path to experiments (above directories should all be within one top directory)
path_experiments <- "../output_compare_kscal/"
# name of dbg file (should be the same for all runs)
dbg_file <- "test1.dbg"
# parameter file (should be the same for all runs)
wc_par_file <- "/home/tobias/Anwendungen/echse/echse_engines/processes/hydro/soil/infos/test_soilwat/data/hor_pars.dat"
# initial conditions file (should be the same for all runs)
inits_file <- "/home/tobias/Anwendungen/echse/echse_engines/processes/hydro/soil/infos/test_soilwat/data/init_vect.dat"
# dates for which states shall be plotted
dates <- c("2001-01-01 00:00:00", "2001-01-02 00:00:00", "2001-01-03 00:00:00", "2001-01-04 00:00:00", "2001-01-08 00:00:00",
"2001-01-15 00:00:00", "2001-02-01 00:00:00", "2001-03-01 00:00:00", "2001-05-01 00:00:00", "2001-07-01 00:00:00")
#dates <- as.POSIXct(c("2001-01-01 00:00:00", "2001-01-01 01:00:00", "2001-01-01 02:00:00", "2001-01-01 03:00:00", "2001-01-01 06:00:00",
#                      "2001-01-01 12:00:00", "2001-01-02 00:00:00", "2001-01-03 00:00:00", "2001-01-04 00:00:00", "2001-01-08 00:00:00",
#                      "2001-01-15 00:00:00", "2001-02-01 00:00:00", "2001-03-01 00:00:00", "2001-05-01 00:00:00", "2001-07-01 00:00:00"), tz="UTC")
### CALCULATIONS ###
# read parameters and initials
wc_par_dat <- read.table(wc_par_file, header=T, sep="\t")
inits_dat <- read.table(inits_file, header=T, sep="\t")
# collect results: STATES
res_dat <- dir(path_experiments, pattern = dbg_file, recursive = T, full.names = T) %>%
# apply for each solver
lapply(function(x) {
# read data
dat <- read.table(x, header=T, sep="\t") %>%
# select values
rename(date = end_of_interval, variable = item_name) %>%
filter(variable %in% c("wc", "mat_pot", "k_u", "run_surf", "inflow", "run_gw")) %>%
droplevels() %>%
select(date, variable, index, value)
# name of experiment
exp_name <- head(tail(unlist(strsplit(x, "/")), n=2),1)
# add initial values to data
timeshift <- max(diff(as.POSIXct(dat$date)))
dat <- bind_rows(inits_dat %>%
select(variable, index, value) %>%
mutate(date = format(min(as.POSIXct(dat$date))-timeshift, "%Y-%m-%d %H:%M:%S")),
dat)
# add name of experiment
return(cbind(dat, experiment=exp_name))
}) %>%
do.call(rbind, .) %>%
# add parameters
bind_rows(., wc_par_dat %>%
gather("variable", "value", k_s:bubble) %>%
mutate(index=position-1, date=NA, experiment="parameter") %>%
select(variable, index, value, date, experiment)
) %>%
# add horizon begin and end
ddply("variable", function(y) {
y %>%
mutate(hora=rep(c(0, head(cumsum(wc_par_dat$hor_depth),-1)), length.out=n()), horb=rep(cumsum(wc_par_dat$hor_depth), length.out=n()))
})
# replace -9999 by NA
res_dat$value[which(res_dat$value == -9999)] <- NA
# # if fluxes are of different resolution among experiments, unify resolution to greatest time step
# resol <- subset(res_dat, experiment != "parameter") %>%
#   ddply("experiment", function(x) {
#     steplen <- diff(sort(as.POSIXct(unique(x$date), tz="UTC")))
#     units(steplen) <- "secs"
#     steplen <- unique(steplen)
#     names(steplen) <- "steplen"
#     return(steplen)
#   })
# PLOTS #
# STATES for specific selected dates
for (d in dates) {
# hydraulic conductivity (mm/h)
dat_plot_sub <- subset(res_dat, (variable=="k_u" & date==d) | experiment == "parameter")
gp <- ggplot(dat_plot_sub, aes(x=log10(value*1000*3600), xend=log10(value*1000*3600), y=-1*hora, yend=-1*horb,colour=experiment)) +
geom_segment(data=subset(dat_plot_sub, experiment != "parameter")) +
geom_segment(data=subset(dat_plot_sub, experiment == "parameter" & variable=="k_s"), colour="black", linetype=2) +
scale_y_continuous(breaks=-1*c(0, cumsum(wc_par_dat$hor_depth)), minor_breaks = NULL) +
scale_x_continuous(limits=c(min(log10(subset(res_dat, variable == "k_u" | variable == "k_s")$value*3600*1000), na.rm = T),
max(log10(subset(res_dat, variable == "k_u" | variable == "k_s")$value*3600*1000), na.rm = T)),
labels=c(1e-6, 1e-5, 1e-4, 1e-3, 0.01, 0.1, 1, 10, 100),
breaks=log10(c(1e-6, 1e-5, 1e-4, 1e-3, 0.01, 0.1, 1, 10, 100))) +
labs(x="Hydraulic conductivity (mm/h)", y="Depth (m)") +
theme_bw() +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
ggsave(paste0("cond_", d, ".png"), plot = gp, width=8, height=6, units="in", dpi=300)
# matric potential (m) or (100 hPa)
dat_plot_sub <- subset(res_dat, (variable=="mat_pot" & date==d) | experiment == "parameter")
gp <- ggplot(dat_plot_sub, aes(x=value, xend=value, y=-1*hora, yend=-1*horb,colour=experiment)) +
geom_segment(data=subset(dat_plot_sub, experiment != "parameter")) +
scale_y_continuous(breaks=-1*c(0, cumsum(wc_par_dat$hor_depth)), minor_breaks = NULL) +
scale_x_continuous(limits=c(min(subset(res_dat, variable == "mat_pot")$value, na.rm = T),
max(subset(res_dat, variable == "mat_pot")$value, na.rm = T))) +
labs(x="Matric potential (m) or (100 hPa)", y="Depth (m)") +
theme_bw() +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
ggsave(paste0("mat_pot_", d, ".png"), plot = gp, width=8, height=6, units="in", dpi=300)
# soil moisture (m3/m3)
dat_plot_sub <- subset(res_dat, (variable=="wc" & date==d) | experiment == "parameter")
gp <- ggplot(dat_plot_sub, aes(x=value, xend=value, y=-1*hora, yend=-1*horb,colour=experiment)) +
geom_segment(data=subset(dat_plot_sub, experiment != "parameter")) +
geom_segment(data=subset(dat_plot_sub, experiment == "parameter" & (variable=="wc_s" | variable=="wc_res")), colour="black", linetype=2) +
geom_segment(data=subset(dat_plot_sub, experiment == "parameter" & variable=="wc_fc"), colour="black", linetype=3) +
scale_y_continuous(breaks=-1*c(0, cumsum(wc_par_dat$hor_depth)), minor_breaks = NULL) +
scale_x_continuous(limits=c(min(subset(res_dat, variable == "wc" | variable == "wc_res")$value, na.rm = T),
max(subset(res_dat, variable == "wc" | variable == "wc_s")$value, na.rm = T))) +
labs(x="Soil water content (m3/m3)", y="Depth (m)") +
theme_bw() +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
ggsave(paste0("wc_", d, ".png"), plot = gp, width=8, height=6, units="in", dpi=300)
}
# time series of FLUXES
m = with(ud_units, m)
mm = with(ud_units, mm)
s = with(ud_units, s)
h = with(ud_units, h)
# surface runoff (mm/h)
res_dat$date <- as.POSIXct(res_dat$date, tz="UTC")
dat_plot_sub <- subset(res_dat, variable=="run_surf") %>%
mutate(value=value * m / s)
sums <- dat_plot_sub %>%
ddply("experiment", function(x) {
steplen <- diff(sort(as.POSIXct(unique(x$date), tz="UTC")))
units(steplen) <- "secs"
steplen <- unique(steplen)
units(steplen) <- s
x %>%
summarise(sum=sum(value*steplen))
})
units(sums$sum) <- mm
sums$experiment <- paste(sums$experiment, " =")
sums <- cbind(sums, " mm")
gp <- ggplot(dat_plot_sub, aes(x=date, y=value, group=experiment, colour=experiment)) +
geom_line() +
scale_y_unit(unit="mm/h") +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b", date_minor_breaks = "1 day") +
labs(y="Surface_runoff", x="Date", title = paste(do.call(paste, sums), collapse = ", ")) +
theme_bw() +
facet_zoom(x = date < "2001-01-03 00:00:00", zoom.size = .5)
ggsave("ts_surf.png", plot = gp, width=12, height=6, units="in", dpi=300)
# Percolation out of soil profile (mm/h)
dat_plot_sub <- subset(res_dat, variable=="run_gw") %>%
mutate(value=value * m / s)
sums <- dat_plot_sub %>%
ddply("experiment", function(x) {
steplen <- diff(sort(as.POSIXct(unique(x$date), tz="UTC")))
units(steplen) <- "secs"
steplen <- unique(steplen)
units(steplen) <- s
x %>%
summarise(sum=sum(value*steplen))
})
units(sums$sum) <- mm
sums$experiment <- paste(sums$experiment, " =")
sums <- cbind(sums, " mm")
gp <- ggplot(dat_plot_sub, aes(x=date, y=value, group=experiment, colour=experiment)) +
geom_line() +
scale_y_unit(unit="mm/h") +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b") +
labs(y="Percolation", x="Date", title = paste(do.call(paste, sums), collapse = ", ")) +
theme_bw()
ggsave("ts_percout.png", plot = gp, width=12, height=6, units="in", dpi=300)
# Infiltration (mm/h)
dat_plot_sub <- subset(res_dat, experiment !="parameter") %>%
ddply(c("date", "experiment"), function(x) {
run <- x %>%
filter(variable=="run_surf") %>%
select(value)
infl <- x %>%
filter(variable=="inflow") %>%
select(value)
inf <- as.numeric(infl) - as.numeric(run)
names(inf) <- "inf"
return(inf)
}) %>%
mutate(inf=inf * m / s)
sums <- dat_plot_sub %>%
ddply("experiment", function(x) {
steplen <- diff(sort(as.POSIXct(unique(x$date), tz="UTC")))
units(steplen) <- "secs"
steplen <- unique(steplen)
units(steplen) <- s
x %>%
summarise(sum=sum(inf*steplen, na.rm=T))
})
units(sums$sum) <- mm
sums$experiment <- paste(sums$experiment, " =")
sums <- cbind(sums, " mm")
gp <- ggplot(dat_plot_sub, aes(x=date, y=inf, group=experiment, colour=experiment)) +
geom_line() +
scale_y_unit(unit="mm/h") +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b", date_minor_breaks = "1 day") +
labs(y="Infiltration", x="Date", title = paste(do.call(paste, sums), collapse = ", ")) +
theme_bw() +
facet_zoom(x = date < "2001-01-03 00:00:00", zoom.size = .5)
ggsave("ts_inf.png", plot = gp, width=12, height=6, units="in", dpi=300)
# water in soil profile (mm)
dat_plot_sub <- subset(res_dat, variable=="wc") %>%
ddply(c("date", "experiment"), summarise, sum=sum(value*(horb-hora)*1000))
dat_plot_sub$date <- as.POSIXct(dat_plot_sub$date, tz="UTC")
gp <- ggplot(dat_plot_sub, aes(x=date, y=sum, group=experiment, colour=experiment)) +
geom_line() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b") +
labs(y="Water in soil profile (mm)", x="Date") +
theme_bw()
ggsave("ts_volwat.png", plot = gp, width=12, height=6, units="in", dpi=300)
#
#
#
#
# # loop over solver results
# plots <- NULL
# cols <- rainbow(length(solvers))
# i <- 0
# for (s in solvers) {
#   i <- i+1
#
#   # read data
#   res_dat <- read.table(paste(path_solvers, s, dbg_file, sep="/"), header=T, sep="\t")
#
#
#   # re-structure soil water state and hydraulic data as xts
#   timeshift <- ifelse(s == "daily", 86400, 3600)
#   start_date <- as.character(rep(format(as.POSIXct(head(res_dat$end_of_interval[grep("^wc$", res_dat$item_name)], n=1), tz='UTC')-timeshift, format="%Y-%m-%d %H:%M:%S"), nrow(wc_par_dat)))
#   echse_states_dat <- data.frame(date = c(start_date, as.character(res_dat$end_of_interval[grep("^wc$", res_dat$item_name)])),
#                                  wc = c(inits_dat$value[grep("^wc$", inits_dat$variable)], res_dat$value[grep("^wc$", res_dat$item_name)]),
#                                  mat_pot = c(inits_dat$value[grep("^mat_pot$", inits_dat$variable)], res_dat$value[grep("^mat_pot$", res_dat$item_name)]),
#                                  k_u = c(inits_dat$value[grep("^k_u$", inits_dat$variable)], res_dat$value[grep("^k_u$", res_dat$item_name)])*1000*3600)
#   echse_states_xts <- xts(echse_states_dat[,-1], as.POSIXct(echse_states_dat$date, tz='UTC', format="%Y-%m-%d %H:%M:%S"))
#
#   # re-structure fluxes
#   fac <- 1000*3600 # factor to convert units from ms-1 -> mmh-1
#   vol_wat_init <- xts(sum(inits_dat$value[grep("^wc$", inits_dat$variable)] * wc_par_dat$hor_depth)*1000, as.POSIXct(head(index(echse_states_xts),n=1), tz='UTC'))
#   echse_flux <- data.frame(run_surf = c(0,res_dat$value[grep("^run_surf$", res_dat$item_name)]*fac),
#                            inflow = c(0,res_dat$value[grep("^inflow$", res_dat$item_name)]*fac),
#                            vol_wat = c(vol_wat_init, tapply(res_dat$value[grep("^wc$", res_dat$item_name)], res_dat$end_of_interval[grep("^wc$", res_dat$item_name)], function(x) sum(x*wc_par_dat$hor_depth))*1000),
#                            perc_out = c(0,res_dat$value[grep("^run_gw$", res_dat$item_name)]*fac))
#   echse_flux$inf_sum <- cumsum(echse_flux$inflow - echse_flux$run_surf)
#   echse_flux_xts <- xts(echse_flux, unique(index(echse_states_xts)))
#
#
#   # loop over selected dates to plot states and hydraulic properties
#   for (d in 1:length(dates)) {
#     date <- dates[d]
#
#     # if this is the first loop iteration initialise plots
#     if (i == 1) {
#       # moisture states
#       # initialise
#       png(paste("wc", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xlim=c(0,1), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="Water content (m3/m3)")
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # parameters (wc_res and wc_sat)
#       segments(x0=wc_par_dat$wc_res, y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="red", lwd=2, lty=2)
#       segments(x0=wc_par_dat$wc_s, y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="red", lwd=2, lty=2)
#       # legend
#       legend(1.08,0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("wc", date, sep="_")]] <- dev.cur()
#
#       # matric potential
#       # initialise
#       png(paste("mat_pot", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xlim=c(0,5), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="Matric potential (m)/(100 hPa)")
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # legend
#       legend(5.3,0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("mat_pot", date, sep="_")]] <- dev.cur()
#
#       # conductivity
#       # initialise
#       png(paste("cond", date, sep="_"), width=650, height=480)
#       par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#       plot(0,0, type="n", xaxt="n", xlim=log10(c(1e-6,100)), ylim=c(-sum(wc_par_dat$hor_depth),0), ylab="Depth (m)", xlab="")
#       ats = log10(c(1e-6, 1e-4, 1e-2, 1, 100))
#       labs = 10^ats
#       axis(1, at=ats, labels=labs, las=1)
#       title(xlab="Hydraulic conductivity (mm/h)", line=3.5)
#       # plot layers
#       abline(h=-cumsum(wc_par_dat$hor_depth), lty=2)
#       abline(h=0, lty=1)
#       # plot ksat
#       segments(x0=log10(wc_par_dat$k_s*1000*3600), y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col="black", lty=2)
#       # legend
#       legend(log10(250),0,legend = solvers, col=cols, lty=1, xpd=NA)
#       # save plot device
#       plots[[paste("cond", date, sep="_")]] <- dev.cur()
#     }
#
#
#     # plot
#     # moisture states
#     dev.set(plots[[paste("wc", date, sep="_")]])
#     segments(x0=echse_states_xts[date,"wc"], y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#
#     # matric potential
#     dev.set(plots[[paste("mat_pot", date, sep="_")]])
#     segments(x0=echse_states_xts[date,"mat_pot"], y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#
#     # conductivity
#     dev.set(plots[[paste("cond", date, sep="_")]])
#     segments(x0=log10(echse_states_xts[date,"k_u"]), y0=c(0,-head(cumsum(wc_par_dat$hor_depth),n=-1)), y1=-cumsum(wc_par_dat$hor_depth), col=cols[i])
#   }
#
#
#   if (i == 1) {
#     # initialise flux plots
#     png("ts_surf.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"run_surf"], ylim=c(0,100), type="n", main="", xlab="Time", ylab="Surface runoff [mm/h]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,60,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_surf"]] <- dev.cur()
#
#     png("ts_inf.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"inf_sum"], ylim=c(25,110), type="n", main="", xlab="Time", ylab="Cumulated infiltration [mm]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,80,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_inf"]] <- dev.cur()
#
#     png("ts_volwat.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"vol_wat"], ylim=c(185,290), type="n", main="", xlab="Time", ylab="Water in soil profile [mm]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,260,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_volwat"]] <- dev.cur()
#
#     png("ts_percout.png", width=800, height=480)
#     par(oma=c(0,0,0,15), mar=c(5,4,1,0))
#     plot(echse_flux_xts[,"perc_out"], ylim=c(0,0.5), type="n", main="", xlab="Time", ylab="Percolation [mm/h]")
#     # legend
#     legend(max(index(echse_flux_xts))+10*86400,0.2,legend = solvers, col=cols, lty=1, xpd=NA)
#     # save plot device
#     plots[["ts_percout"]] <- dev.cur()
#   }
#
#
#   # plot fluxes
#   dev.set(plots[["ts_surf"]])
#   lines(echse_flux_xts[,"run_surf"], col=cols[i])
#
#   dev.set(plots[["ts_volwat"]])
#   lines(echse_flux_xts[,"vol_wat"], col=cols[i])
#
#   dev.set(plots[["ts_inf"]])
#   lines(echse_flux_xts[,"inf_sum"], col=cols[i])
#
#   dev.set(plots[["ts_percout"]])
#   lines(echse_flux_xts[,"perc_out"], col=cols[i])
# }
#
# graphics.off()
