plot(temp, slopeSatVapCurve_cce(magnus_dp_exp(temp), Rv, Lv_calc(temp), temp+273.15), type="l", xlab="Temperature[Â°C]", ylab="Slope of saturation vapor pressure curve [hPaK-1]")
lines(temp, slopeSatVapCurve_dp(magnus_dp_exp(temp), temp), col="red")
plot(temp, Lv_calc(temp), type="l")
Lv_calc <- function(temp) {
return( (2501. - 2.37 * temp) * 1000)
}
lines(temp, Lv_calc(temp), col="red")
pi
doy <- seq(1,365)
asin(0.4 * sin(2. * PI / 365. * (doy - 82.)))
asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
0.4 * sin(2. * pi / 365. * (doy - 82.))
asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
sin(asin(0.4 * sin(2. * pi / 365. * (doy - 82.))))
?sin
sin(0)
sin(180)
sin(pi)
sin(2*pi)
sin(360)
asin(180)
asin(pi)
sin(2*pi)
sin(pi)
sin(0.5*pi)
sin(0*pi)
sin(1/2*pi)
sin(2/2*pi)
sin(3/2*pi)
sin(4/2*pi)
sin(23.44*pi/180)
asin(sin(23.44*pi/180))
sinpi(sin(23.44*pi/180))
sin(23.44)
sin(pi)
asin(sin(23.44*pi/180))
asin(sin(23.44*pi/180))*180/pi
doy
asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))*180/pi
asin(0.4)*180/pi
asin(0.39)*180/pi
asin(0.4)*180/pi
PI
hour=seq(1,24)
hour
doy=1
lat=-2
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
hour_mid = hour + 0.5
hour_mid
S_c
b
L_m = 38.5 # Fortaleza
L_z = 45 # UTC-3 (used in Fortaleza)
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
w_mid
doy
w_s = w_mid - pi / 24.
w_e = w_mid + pi / 24.
w_s
w_e
sin(pi)
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# Longitutde of the centre of the local time zone (decimal degrees west of Greenwich)
L_m = 38.5 # Fortaleza
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_z = 45 # UTC-3 (used in Fortaleza)
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
phi = lat * pi / 180.
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
w_s = dayTime_fac(doy,lat,delta)
ws
w_s
w_s*180/pi
doy
lat
delta
delta*180/pi
w_s
w_ini
w_mid
w_mid < -w_s | w_mid > w_s
hour <- seq(0,23)
# Longitutde of the centre of the local time zone (decimal degrees west of Greenwich)
L_m = 38.5 # Fortaleza
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_z = 45 # UTC-3 (used in Fortaleza)
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
w_mid < -w_s | w_mid > w_s
# current hour of day
hour <- seq(0,23)
# current day of year
doy <- 29
# latitude of location (deg)
lat <- -3.75
# Longitutde of the centre of the local time zone (decimal degrees west of Greenwich)
L_m = 38.5 # Fortaleza
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_z = 45 # UTC-3 (used in Fortaleza)
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
w_mid < -w_s | w_mid > w_s
# current hour of day
hour <- seq(0,23)
# current day of year
doy <- 29
# latitude of location (deg)
lat <- 52.5
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_m = 346.5 # Berlin
# Longitutde of the centre of the local time zone (decimal degrees west of Greenwich)
L_z = 345 # UTC-3 (used in Fortaleza)
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
w_mid < -w_s | w_mid > w_s
# current hour of day
hour <- seq(0,23)
# current day of year
doy <- 29
# latitude of location (deg)
lat <- 52.5
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_m = 1 # Berlin
# Longitutde of the centre of the local time zone (decimal degrees west of Greenwich)
L_z = 0 # UTC-3 (used in Fortaleza)
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
# hours without sunshine, i.e. incoming radiation (+/- half an hour accuracy)
w_mid < -w_s | w_mid > w_s
utc_add = 1
360 - utc_add * 15
L_z = 360 - utc_add * 15
utc_add <- seq(-15,15)
utc_add
L_z = (360 - utc_add * 15) %% 360
L_z
### FUNCTIONS ###
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# function to compute hourly raterrestrial radiation
rad_extraterr_hourly <- function(doy, lat, hour, utc_add, L_m) {
# solar constant
SOLAR_C = 1360.8
# compute centre of current time zone
L_z = (360 - utc_add * 15) %% 360
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
# hours without sunshine, i.e. incoming radiation (+/- half an hour accuracy)
if ( (w_mid < -w_s) | (w_mid > w_s) )
return(0)
# calculate radiation
return(1./pi * SOLAR_C * E_0 * ( (w_end-w_ini) * sin(delta) * sin(phi) + cos(delta) * cos(phi) * (sin(w_end)-sin(w_ini)) ))
}
plot(hour, rad_extraterr_hourly(doy, lat, hour, utc_add, L_m), type="l")
w_mid
w_s
?apply
?vapply
rad_vals <- sapply(hour, function(x) rad_extraterr_hourly(doy, lat, x, utc_add, L_m))
warnings()
### INPUT ###
# current hour of day
hour <- seq(0,23)
# current day of year
doy <- 29
# latitude of location (deg)
lat <- 52.5 # Berlin
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_m = 346.5 # Berlin
# deviation of local time zone from UTC (may vary over the year due to daylight saving time)
utc_add = 1
### FUNCTIONS ###
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# function to compute hourly raterrestrial radiation
rad_extraterr_hourly <- function(doy, lat, hour, utc_add, L_m) {
# solar constant
SOLAR_C = 1360.8
# compute centre of current time zone
L_z = (360 - utc_add * 15) %% 360
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
# hours without sunshine, i.e. incoming radiation (+/- half an hour accuracy)
if ( (w_mid < -w_s) | (w_mid > w_s) )
return(0)
# calculate radiation
return(1./pi * SOLAR_C * E_0 * ( (w_end-w_ini) * sin(delta) * sin(phi) + cos(delta) * cos(phi) * (sin(w_end)-sin(w_ini)) ))
}
hour
doy
lat
utc_add
L_m
rad_vals <- sapply(hour, function(x) rad_extraterr_hourly(doy, lat, x, utc_add, L_m))
plot(hour, rad_extraterr_hourly(doy, lat, hour, utc_add, L_m), type="l")
plot(hour, rad_vals, type="l")
rad_vals_summer <- sapply(hour, function(x) rad_extraterr_hourly(79, lat, x, utc_add, L_m))
# at summer solstice
rad_vals_summer <- sapply(hour, function(x) rad_extraterr_hourly(172, lat, x, utc_add, L_m))
# at autumn equinox
rad_vals_autumn <- sapply(hour, function(x) rad_extraterr_hourly(266, lat, x, utc_add, L_m))
# at winter solstice
rad_vals_winter <- sapply(hour, function(x) rad_extraterr_hourly(356, lat, x, utc_add, L_m))
plot(hour, rad_vals_summer, type="l")
plot(hour, rad_vals_summer, type="l", col="red")
lines(hour, rad_vals_spring, col="green")
rad_vals_spring <- sapply(hour, function(x) rad_extraterr_hourly(79, lat, x, utc_add, L_m))
# at summer solstice
rad_vals_summer <- sapply(hour, function(x) rad_extraterr_hourly(172, lat, x, utc_add, L_m))
# at autumn equinox
rad_vals_autumn <- sapply(hour, function(x) rad_extraterr_hourly(266, lat, x, utc_add, L_m))
# at winter solstice
rad_vals_winter <- sapply(hour, function(x) rad_extraterr_hourly(356, lat, x, utc_add, L_m))
plot(hour, rad_vals_summer, type="l", col="red")
lines(hour, rad_vals_spring, col="green")
lines(hour, rad_vals_autumn, col="brown")
lines(hour, rad_vals_winter, col="blue")
rad_vals_spring <- sapply(hour, function(x) rad_extraterr_hourly(79, lat, x, 1, L_m))
# at summer solstice
rad_vals_summer <- sapply(hour, function(x) rad_extraterr_hourly(172, lat, x, 2, L_m))
# at autumn equinox
rad_vals_autumn <- sapply(hour, function(x) rad_extraterr_hourly(266, lat, x, 2, L_m))
# at winter solstice
rad_vals_winter <- sapply(hour, function(x) rad_extraterr_hourly(356, lat, x, 1, L_m))
plot(hour, rad_vals_summer, type="l", col="red")
lines(hour, rad_vals_spring, col="green")
lines(hour, rad_vals_autumn, col="brown")
lines(hour, rad_vals_winter, col="blue")
legend("topleft", legend=c("Summer solstice", "Spring equinox", "Autumn equinox", "Winter solstice"),
col=c("red", "green", "brown", "blue"), lty=1)
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day")
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day",
xaxp=hour)
?par
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day",
xaxp=c(min(hour), max(hour), 1))
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day",
xaxp=c(min(hour), max(hour), length(hour)))
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day",
xaxp=c(min(hour), max(hour), length(hour)+1))
?axis
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day", xaxt="n")
axis(1, at=hour)
lines(hour, rad_vals_spring, col="green")
lines(hour, rad_vals_autumn, col="brown")
lines(hour, rad_vals_winter, col="blue")
legend("topleft", legend=c("Summer solstice", "Spring equinox", "Autumn equinox", "Winter solstice"),
col=c("red", "green", "brown", "blue"), lty=1)
pdf("test_radex_hourly.pdf")
par(cex=1.25, mar=c(4.5,4.5,1,1), cex.lab=1.5, lwd=2)
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day", xaxt="n")
axis(1, at=hour)
lines(hour, rad_vals_spring, col="green")
lines(hour, rad_vals_autumn, col="brown")
lines(hour, rad_vals_winter, col="blue")
legend("topleft", legend=c("Summer solstice", "Spring equinox", "Autumn equinox", "Winter solstice"),
col=c("red", "green", "brown", "blue"), lty=1)
dev.off()
### INPUT ###
# current hour of day
hour <- seq(0,23)
# current day of year
doy <- 29
# latitude of location (deg)
lat <- 52.5 # Berlin
# Longitude of the location of interest (decimal degrees west of Greenwich)
L_m = 346.5 # Berlin
# deviation of local time zone from UTC (may vary over the year due to daylight saving time)
utc_add = 1
### FUNCTIONS ###
# function to compute sunset/sunrise hour angle
dayTime_fac <- function(doy,lat,delta) {
# latitude in (rad)
phi = abs(lat * pi / 180.)
sunrise = -tan(delta) * tan(phi)
if (sunrise > 1.)
sunrise = 1.
if (sunrise < -1.)
sunrise = -1
return(acos(sunrise))
}
# function to compute hourly raterrestrial radiation
rad_extraterr_hourly <- function(doy, lat, hour, utc_add, L_m) {
# solar constant
SOLAR_C = 1360.8
# compute centre of current time zone
L_z = (360 - utc_add * 15) %% 360
# solar declination (rad)
delta = asin(0.4 * sin(2. * pi / 365. * (doy - 82.)))
# eccentricity correction factor (-)
E_0 = 1. + 0.033 * cos(2. * pi * doy / 365.)
# latitude in (rad)
phi = lat * pi / 180.
# seasonal correction factor, eqs. 32, 33
b = 2. * pi * (doy - 81.) / 364.
S_c = 0.1645 * sin(2.*b) - 0.1255 * cos(b) - 0.025 * sin(b)
# solar time angle at the midpoint of the hour of day (rad), eq. 31
hour_mid = hour + 0.5
w_mid = pi / 12. * ( (hour_mid + 0.06667 * (L_z-L_m) + S_c) - 12. )
# solar time angles and begin and end of hour, eqs. 29, 30
w_ini = w_mid - pi / 24.
w_end = w_mid + pi / 24.
# sunset/sunrise hour angle (rad)
w_s = dayTime_fac(doy,lat,delta)
# hours without sunshine, i.e. incoming radiation (+/- half an hour accuracy)
if ( (w_mid < -w_s) | (w_mid > w_s) )
return(0)
# calculate radiation
return(1./pi * SOLAR_C * E_0 * ( (w_end-w_ini) * sin(delta) * sin(phi) + cos(delta) * cos(phi) * (sin(w_end)-sin(w_ini)) ))
}
### TEST: daily evolution of radex for Berlin at different doy ###
# at spring equinox
rad_vals_spring <- sapply(hour, function(x) rad_extraterr_hourly(79, lat, x, 1, L_m))
# at summer solstice
rad_vals_summer <- sapply(hour, function(x) rad_extraterr_hourly(172, lat, x, 2, L_m))
# at autumn equinox
rad_vals_autumn <- sapply(hour, function(x) rad_extraterr_hourly(266, lat, x, 2, L_m))
# at winter solstice
rad_vals_winter <- sapply(hour, function(x) rad_extraterr_hourly(356, lat, x, 1, L_m))
pdf("test_radex_hourly.pdf")
par(cex=1.25, mar=c(4.5,4.5,1,1), cex.lab=1.5, lwd=2)
plot(hour, rad_vals_summer, type="l", col="red", ylab="Extraterrestrial radiation [Wm-2]", xlab="Hour of day", xaxt="n", las=1)
axis(1, at=hour)
lines(hour, rad_vals_spring, col="green")
lines(hour, rad_vals_autumn, col="brown")
lines(hour, rad_vals_winter, col="blue")
legend("topleft", legend=c("Summer solstice", "Spring equinox", "Autumn equinox", "Winter solstice"),
col=c("red", "green", "brown", "blue"), lty=1)
dev.off()
